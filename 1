def func2(arg22, arg23):
    var39 = var26(arg23, arg22)
    var50 = var42(arg22, arg23)
    var55 = func9(arg22, var50)
    def func10(arg56, arg57):
        var58 = var39 & (var50 & (var50 & var50))
        var59 = (arg56 + arg23) | var50
        var60 = var39 ^ arg56
        var61 = (var50 | (var58 | var50)) - var50
        var62 = ((arg57 | 1918552972) & var58) ^ -1545988566
        var63 = (arg23 & var61) - var55 + arg22
        var64 = arg57 & arg57
        var65 = var61 | -1779546235 + var63 | var50
        var66 = ((var59 + var65) - var61) - arg56
        if var62 < var66:
            var67 = (795 & var63) | var55 - var61
        else:
            var67 = (var61 - arg23) | arg57
        var68 = (var58 - var58) & var50 ^ -1382945793
        result = ((var65 | (((var55 ^ (var64 | var61)) | var59 ^ var61 & var59) + var60)) ^ var50 - arg56 ^ var61) - var62
        return result
    var69 = func10(var55, arg23)
    var77 = var72(arg22, var39)
    var78 = (arg23 - arg22) - arg23 ^ -1149959113
    var79 = (var39 ^ (arg23 ^ var69)) | var39
    var80 = arg23 + ((arg22 ^ var79) & var78)
    var81 = (572 - var77 | var80) + var79
    var82 = arg22 & var81 & var50 ^ var55
    var83 = arg22 - var77 - var55 & var69
    var84 = var78 ^ var50 | var78 | var81
    var85 = var80 - (var82 | var80 | var50)
    var86 = (var69 ^ var55) + var82
    var87 = (var50 + var50) | var83 - var86
    var88 = var82 & ((var50 - 184) ^ var82)
    var89 = var79 ^ var82
    var90 = var87 ^ var77
    var91 = var83 - var79 | var85
    var92 = var50 | var81 | var79 + var88
    result = var90 + arg23
    return result
def func13(arg73, arg74):
    var75 = 298 ^ arg74 - arg74 & (arg73 + 34)
    var76 = var75 | arg73 & arg73 | arg73 & arg73
    result = -873263429 + arg74
    return result
def func12():
    closure = [-7]
    def func11(arg70, arg71):
        closure[0] += func13(arg70, arg71)
        return closure[0]
    func = func11
    return func
var72 = func12()
def func9(arg51, arg52):
    var53 = 0
    for var54 in range(50):
        var53 += var54 | (arg51 + var54)
    return var53
def func8(arg43, arg44):
    var45 = 1860403247 | -673 ^ arg43 ^ (1786091227 ^ 798 ^ arg44 + arg43) & arg43
    var46 = (var45 ^ (var45 - var45 ^ var45) - ((var45 | arg43) ^ var45 ^ ((((var45 & arg43 & 397) | arg44) + (arg43 - arg44)) & ((arg44 + arg43) - -57378032 - var45))) - arg44 ^ -356 ^ 341 - 19) & 465
    var47 = var46 ^ -761907708
    var48 = -210541179 & var45
    var49 = var46 & (var46 | (var48 & -200694658 & arg44 - (arg43 | var46 ^ arg43)))
    result = (var47 ^ var47) & arg43 ^ (arg44 ^ arg43 - var45 - var46 ^ var46)
    return result
def func7():
    closure = [-4]
    def func6(arg40, arg41):
        closure[0] += func8(arg40, arg41)
        return closure[0]
    func = func6
    return func
var42 = func7()
def func5(arg27, arg28):
    var29 = 1564212677 | arg27
    var30 = -1087526017 ^ arg27
    var31 = arg27 + arg28
    var32 = var31 ^ var30
    var33 = ((var29 + var29) - var30) & var29
    var34 = var33 & var32 - var33 - var32
    var35 = arg28 ^ (arg28 ^ (-445956727 + var34))
    var36 = 685 | (var30 ^ var30 - var34)
    var37 = -390 - -816
    var38 = var37 | (var30 & arg27) | var30
    result = var34 + var35 | (((var31 + var34 + (arg28 + (var35 - var33) - (var37 ^ var37))) | var31) ^ var34 ^ var38)
    return result
def func4():
    closure = [0]
    def func3(arg24, arg25):
        closure[0] += func5(arg24, arg25)
        return closure[0]
    func = func3
    return func
var26 = func4()
def func1(arg1, arg2):
    var3 = 114 | arg2
    var4 = var3 ^ (-750 | (arg1 & arg2))
    var5 = var4 & (arg2 | 548 | arg1)
    var6 = var3 & var3
    var7 = (var3 - var4) | 104 | arg1
    var8 = (var7 ^ var5 | var3) ^ -209
    var9 = (var6 ^ var5 ^ var4) & var4
    if var4 < var8:
        var10 = var8 ^ -195 - 299 & arg1
    else:
        var10 = (arg1 | 378 ^ var4) + var4
    var11 = (var5 - arg2 | 662) ^ arg2
    var12 = var3 - var3
    var13 = (var4 | var7) & var6
    var14 = var6 + arg1 & arg1
    var15 = var6 ^ (var7 - var8) + arg1
    var16 = (var9 ^ arg2 & var4) ^ var7
    var17 = ((var9 - var15) + 1504661579) | var3
    var18 = var11 + arg1 ^ -1026374715 & var3
    var19 = (var15 ^ var7 ^ var18) ^ arg1
    var20 = var13 & (var3 - var15) & var12
    var21 = (var14 - var14) & var9 | var3
    result = var17 & var8 - var20 & var20
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 93'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg22, arg23):
    var39 = var26(arg23, arg22)
    var50 = var42(arg22, arg23)
    var55 = func9(arg22, var50)
    def func10(arg56, arg57):
        var58 = var39 & (var50 & (var50 & var50))
        var59 = (arg56 + arg23) | var50
        var60 = var39 ^ arg56
        var61 = (var50 | (var58 | var50)) - var50
        var62 = ((arg57 | 1918552972) & var58) ^ -1545988566
        var63 = (arg23 & var61) - var55 + arg22
        var64 = arg57 & arg57
        var65 = var61 | -1779546235 + var63 | var50
        var66 = ((var59 + var65) - var61) - arg56
        if var62 < var66:
            var67 = (795 & var63) | var55 - var61
        else:
            var67 = (var61 - arg23) | arg57
        var68 = (var58 - var58) & var50 ^ -1382945793
        result = ((var65 | (((var55 ^ (var64 | var61)) | var59 ^ var61 & var59) + var60)) ^ var50 - arg56 ^ var61) - var62
        return result
    var69 = func10(var55, arg23)
    var77 = var72(arg22, var39)
    var78 = (arg23 - arg22) - arg23 ^ -1149959113
    var79 = (var39 ^ (arg23 ^ var69)) | var39
    var80 = arg23 + ((arg22 ^ var79) & var78)
    var81 = (572 - var77 | var80) + var79
    var82 = arg22 & var81 & var50 ^ var55
    var83 = arg22 - var77 - var55 & var69
    var84 = var78 ^ var50 | var78 | var81
    var85 = var80 - (var82 | var80 | var50)
    var86 = (var69 ^ var55) + var82
    var87 = (var50 + var50) | var83 - var86
    var88 = var82 & ((var50 - 184) ^ var82)
    var89 = var79 ^ var82
    var90 = var87 ^ var77
    var91 = var83 - var79 | var85
    var92 = var50 | var81 | var79 + var88
    result = var90 + arg23
    return result
def func13(arg73, arg74):
    var75 = 298 ^ arg74 - arg74 & (arg73 + 34)
    var76 = var75 | arg73 & arg73 | arg73 & arg73
    result = -873263429 + arg74
    return result
def func12():
    closure = [-7]
    def func11(arg70, arg71):
        closure[0] += func13(arg70, arg71)
        return closure[0]
    func = func11
    return func
var72 = func12()
def func9(arg51, arg52):
    var53 = 0
    for var54 in range(50):
        var53 += var54 | (arg51 + var54)
    return var53
def func8(arg43, arg44):
    var45 = 1860403247 | -673 ^ arg43 ^ (1786091227 ^ 798 ^ arg44 + arg43) & arg43
    var46 = (var45 ^ (var45 - var45 ^ var45) - ((var45 | arg43) ^ var45 ^ ((((var45 & arg43 & 397) | arg44) + (arg43 - arg44)) & ((arg44 + arg43) - -57378032 - var45))) - arg44 ^ -356 ^ 341 - 19) & 465
    var47 = var46 ^ -761907708
    var48 = -210541179 & var45
    var49 = var46 & (var46 | (var48 & -200694658 & arg44 - (arg43 | var46 ^ arg43)))
    result = (var47 ^ var47) & arg43 ^ (arg44 ^ arg43 - var45 - var46 ^ var46)
    return result
def func7():
    closure = [-4]
    def func6(arg40, arg41):
        closure[0] += func8(arg40, arg41)
        return closure[0]
    func = func6
    return func
var42 = func7()
def func5(arg27, arg28):
    var29 = 1564212677 | arg27
    var30 = -1087526017 ^ arg27
    var31 = arg27 + arg28
    var32 = var31 ^ var30
    var33 = ((var29 + var29) - var30) & var29
    var34 = var33 & var32 - var33 - var32
    var35 = arg28 ^ (arg28 ^ (-445956727 + var34))
    var36 = 685 | (var30 ^ var30 - var34)
    var37 = -390 - -816
    var38 = var37 | (var30 & arg27) | var30
    result = var34 + var35 | (((var31 + var34 + (arg28 + (var35 - var33) - (var37 ^ var37))) | var31) ^ var34 ^ var38)
    return result
def func4():
    closure = [0]
    def func3(arg24, arg25):
        closure[0] += func5(arg24, arg25)
        return closure[0]
    func = func3
    return func
var26 = func4()
def func1(arg1, arg2):
    var3 = 114 | arg2
    var4 = var3 ^ (-750 | (arg1 & arg2))
    var5 = var4 & (arg2 | 548 | arg1)
    var6 = var3 & var3
    var7 = (var3 - var4) | 104 | arg1
    var8 = (var7 ^ var5 | var3) ^ -209
    var9 = (var6 ^ var5 ^ var4) & var4
    if var4 < var8:
        var10 = var8 ^ -195 - 299 & arg1
    else:
        var10 = (arg1 | 378 ^ var4) + var4
    var11 = (var5 - arg2 | 662) ^ arg2
    var12 = var3 - var3
    var13 = (var4 | var7) & var6
    var14 = var6 + arg1 & arg1
    var15 = var6 ^ (var7 - var8) + arg1
    var16 = (var9 ^ arg2 & var4) ^ var7
    var17 = ((var9 - var15) + 1504661579) | var3
    var18 = var11 + arg1 ^ -1026374715 & var3
    var19 = (var15 ^ var7 ^ var18) ^ arg1
    var20 = var13 & (var3 - var15) & var12
    var21 = (var14 - var14) & var9 | var3
    result = var17 & var8 - var20 & var20
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 93'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg22, arg23):
    var39 = var26(arg23, arg22)
    var50 = var42(arg22, arg23)
    var55 = func9(arg22, var50)
    def func10(arg56, arg57):
        var58 = var39 & (var50 & (var50 & var50))
        var59 = (arg56 + arg23) | var50
        var60 = var39 ^ arg56
        var61 = (var50 | (var58 | var50)) - var50
        var62 = ((arg57 | 1918552972) & var58) ^ -1545988566
        var63 = (arg23 & var61) - var55 + arg22
        var64 = arg57 & arg57
        var65 = var61 | -1779546235 + var63 | var50
        var66 = ((var59 + var65) - var61) - arg56
        if var62 < var66:
            var67 = (795 & var63) | var55 - var61
        else:
            var67 = (var61 - arg23) | arg57
        var68 = (var58 - var58) & var50 ^ -1382945793
        result = ((var65 | (((var55 ^ (var64 | var61)) | var59 ^ var61 & var59) + var60)) ^ var50 - arg56 ^ var61) - var62
        return result
    var69 = func10(var55, arg23)
    var77 = var72(arg22, var39)
    var78 = (arg23 - arg22) - arg23 ^ -1149959113
    var79 = (var39 ^ (arg23 ^ var69)) | var39
    var80 = arg23 + ((arg22 ^ var79) & var78)
    var81 = (572 - var77 | var80) + var79
    var82 = arg22 & var81 & var50 ^ var55
    var83 = arg22 - var77 - var55 & var69
    var84 = var78 ^ var50 | var78 | var81
    var85 = var80 - (var82 | var80 | var50)
    var86 = (var69 ^ var55) + var82
    var87 = (var50 + var50) | var83 - var86
    var88 = var82 & ((var50 - 184) ^ var82)
    var89 = var79 ^ var82
    var90 = var87 ^ var77
    var91 = var83 - var79 | var85
    var92 = var50 | var81 | var79 + var88
    result = var90 + arg23
    return result
def func13(arg73, arg74):
    var75 = 298 ^ arg74 - arg74 & (arg73 + 34)
    var76 = var75 | arg73 & arg73 | arg73 & arg73
    result = -873263429 + arg74
    return result
def func12():
    closure = [-7]
    def func11(arg70, arg71):
        closure[0] += func13(arg70, arg71)
        return closure[0]
    func = func11
    return func
var72 = func12()
def func9(arg51, arg52):
    var53 = 0
    for var54 in range(50):
        var53 += var54 | (arg51 + var54)
    return var53
def func8(arg43, arg44):
    var45 = 1860403247 | -673 ^ arg43 ^ (1786091227 ^ 798 ^ arg44 + arg43) & arg43
    var46 = (var45 ^ (var45 - var45 ^ var45) - ((var45 | arg43) ^ var45 ^ ((((var45 & arg43 & 397) | arg44) + (arg43 - arg44)) & ((arg44 + arg43) - -57378032 - var45))) - arg44 ^ -356 ^ 341 - 19) & 465
    var47 = var46 ^ -761907708
    var48 = -210541179 & var45
    var49 = var46 & (var46 | (var48 & -200694658 & arg44 - (arg43 | var46 ^ arg43)))
    result = (var47 ^ var47) & arg43 ^ (arg44 ^ arg43 - var45 - var46 ^ var46)
    return result
def func7():
    closure = [-4]
    def func6(arg40, arg41):
        closure[0] += func8(arg40, arg41)
        return closure[0]
    func = func6
    return func
var42 = func7()
def func5(arg27, arg28):
    var29 = 1564212677 | arg27
    var30 = -1087526017 ^ arg27
    var31 = arg27 + arg28
    var32 = var31 ^ var30
    var33 = ((var29 + var29) - var30) & var29
    var34 = var33 & var32 - var33 - var32
    var35 = arg28 ^ (arg28 ^ (-445956727 + var34))
    var36 = 685 | (var30 ^ var30 - var34)
    var37 = -390 - -816
    var38 = var37 | (var30 & arg27) | var30
    result = var34 + var35 | (((var31 + var34 + (arg28 + (var35 - var33) - (var37 ^ var37))) | var31) ^ var34 ^ var38)
    return result
def func4():
    closure = [0]
    def func3(arg24, arg25):
        closure[0] += func5(arg24, arg25)
        return closure[0]
    func = func3
    return func
var26 = func4()
def func1(arg1, arg2):
    var3 = 114 | arg2
    var4 = var3 ^ (-750 | (arg1 & arg2))
    var5 = var4 & (arg2 | 548 | arg1)
    var6 = var3 & var3
    var7 = (var3 - var4) | 104 | arg1
    var8 = (var7 ^ var5 | var3) ^ -209
    var9 = (var6 ^ var5 ^ var4) & var4
    if var4 < var8:
        var10 = var8 ^ -195 - 299 & arg1
    else:
        var10 = (arg1 | 378 ^ var4) + var4
    var11 = (var5 - arg2 | 662) ^ arg2
    var12 = var3 - var3
    var13 = (var4 | var7) & var6
    var14 = var6 + arg1 & arg1
    var15 = var6 ^ (var7 - var8) + arg1
    var16 = (var9 ^ arg2 & var4) ^ var7
    var17 = ((var9 - var15) + 1504661579) | var3
    var18 = var11 + arg1 ^ -1026374715 & var3
    var19 = (var15 ^ var7 ^ var18) ^ arg1
    var20 = var13 & (var3 - var15) & var12
    var21 = (var14 - var14) & var9 | var3
    result = var17 & var8 - var20 & var20
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 93'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg22, arg23):
    var39 = var26(arg23, arg22)
    var50 = var42(arg22, arg23)
    var55 = func9(arg22, var50)
    def func10(arg56, arg57):
        var58 = var39 & (var50 & (var50 & var50))
        var59 = (arg56 + arg23) | var50
        var60 = var39 ^ arg56
        var61 = (var50 | (var58 | var50)) - var50
        var62 = ((arg57 | 1918552972) & var58) ^ -1545988566
        var63 = (arg23 & var61) - var55 + arg22
        var64 = arg57 & arg57
        var65 = var61 | -1779546235 + var63 | var50
        var66 = ((var59 + var65) - var61) - arg56
        if var62 < var66:
            var67 = (795 & var63) | var55 - var61
        else:
            var67 = (var61 - arg23) | arg57
        var68 = (var58 - var58) & var50 ^ -1382945793
        result = ((var65 | (((var55 ^ (var64 | var61)) | var59 ^ var61 & var59) + var60)) ^ var50 - arg56 ^ var61) - var62
        return result
    var69 = func10(var55, arg23)
    var77 = var72(arg22, var39)
    var78 = (arg23 - arg22) - arg23 ^ -1149959113
    var79 = (var39 ^ (arg23 ^ var69)) | var39
    var80 = arg23 + ((arg22 ^ var79) & var78)
    var81 = (572 - var77 | var80) + var79
    var82 = arg22 & var81 & var50 ^ var55
    var83 = arg22 - var77 - var55 & var69
    var84 = var78 ^ var50 | var78 | var81
    var85 = var80 - (var82 | var80 | var50)
    var86 = (var69 ^ var55) + var82
    var87 = (var50 + var50) | var83 - var86
    var88 = var82 & ((var50 - 184) ^ var82)
    var89 = var79 ^ var82
    var90 = var87 ^ var77
    var91 = var83 - var79 | var85
    var92 = var50 | var81 | var79 + var88
    result = var90 + arg23
    return result
def func13(arg73, arg74):
    var75 = 298 ^ arg74 - arg74 & (arg73 + 34)
    var76 = var75 | arg73 & arg73 | arg73 & arg73
    result = -873263429 + arg74
    return result
def func12():
    closure = [-7]
    def func11(arg70, arg71):
        closure[0] += func13(arg70, arg71)
        return closure[0]
    func = func11
    return func
var72 = func12()
def func9(arg51, arg52):
    var53 = 0
    for var54 in range(50):
        var53 += var54 | (arg51 + var54)
    return var53
def func8(arg43, arg44):
    var45 = 1860403247 | -673 ^ arg43 ^ (1786091227 ^ 798 ^ arg44 + arg43) & arg43
    var46 = (var45 ^ (var45 - var45 ^ var45) - ((var45 | arg43) ^ var45 ^ ((((var45 & arg43 & 397) | arg44) + (arg43 - arg44)) & ((arg44 + arg43) - -57378032 - var45))) - arg44 ^ -356 ^ 341 - 19) & 465
    var47 = var46 ^ -761907708
    var48 = -210541179 & var45
    var49 = var46 & (var46 | (var48 & -200694658 & arg44 - (arg43 | var46 ^ arg43)))
    result = (var47 ^ var47) & arg43 ^ (arg44 ^ arg43 - var45 - var46 ^ var46)
    return result
def func7():
    closure = [-4]
    def func6(arg40, arg41):
        closure[0] += func8(arg40, arg41)
        return closure[0]
    func = func6
    return func
var42 = func7()
def func5(arg27, arg28):
    var29 = 1564212677 | arg27
    var30 = -1087526017 ^ arg27
    var31 = arg27 + arg28
    var32 = var31 ^ var30
    var33 = ((var29 + var29) - var30) & var29
    var34 = var33 & var32 - var33 - var32
    var35 = arg28 ^ (arg28 ^ (-445956727 + var34))
    var36 = 685 | (var30 ^ var30 - var34)
    var37 = -390 - -816
    var38 = var37 | (var30 & arg27) | var30
    result = var34 + var35 | (((var31 + var34 + (arg28 + (var35 - var33) - (var37 ^ var37))) | var31) ^ var34 ^ var38)
    return result
def func4():
    closure = [0]
    def func3(arg24, arg25):
        closure[0] += func5(arg24, arg25)
        return closure[0]
    func = func3
    return func
var26 = func4()
def func1(arg1, arg2):
    var3 = 114 | arg2
    var4 = var3 ^ (-750 | (arg1 & arg2))
    var5 = var4 & (arg2 | 548 | arg1)
    var6 = var3 & var3
    var7 = (var3 - var4) | 104 | arg1
    var8 = (var7 ^ var5 | var3) ^ -209
    var9 = (var6 ^ var5 ^ var4) & var4
    if var4 < var8:
        var10 = var8 ^ -195 - 299 & arg1
    else:
        var10 = (arg1 | 378 ^ var4) + var4
    var11 = (var5 - arg2 | 662) ^ arg2
    var12 = var3 - var3
    var13 = (var4 | var7) & var6
    var14 = var6 + arg1 & arg1
    var15 = var6 ^ (var7 - var8) + arg1
    var16 = (var9 ^ arg2 & var4) ^ var7
    var17 = ((var9 - var15) + 1504661579) | var3
    var18 = var11 + arg1 ^ -1026374715 & var3
    var19 = (var15 ^ var7 ^ var18) ^ arg1
    var20 = var13 & (var3 - var15) & var12
    var21 = (var14 - var14) & var9 | var3
    result = var17 & var8 - var20 & var20
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 93'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,
